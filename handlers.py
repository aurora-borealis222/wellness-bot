from datetime import date

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import service
from service import *
from states import UserProfile

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
                         + "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n\n–¢–∞–∫–∂–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ú–µ–Ω—é.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/log_water - –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)\n"
        "/log_food - –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)\n"
        "/log_workout - –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)\n"
        "/check_progress - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º"
    )

@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(UserProfile.weight)

@router.message(UserProfile.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(UserProfile.height)

@router.message(UserProfile.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(UserProfile.age)

@router.message(UserProfile.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(UserProfile.activity)

@router.message(UserProfile.activity)
async def process_activity(message: Message, state: FSMContext):
    await state.update_data(activity=int(message.text))
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(UserProfile.city)

@router.message(UserProfile.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()
    saved_profile = await save_profile(data.copy(), message.from_user.id)
    await state.clear()
    await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n{profile_to_str(saved_profile)}")

@router.message(Command("log_water"))
async def log_water(message: Message, command: CommandObject, state: FSMContext):
    logged_water = int(command.args)
    await state.set_state(UserProfile.logged_water)
    await state.update_data(logged_water=logged_water)

    mls_to_goal = service.get_water_goal_by_logged(logged_water, message.from_user.id)
    result_message = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {logged_water} –º–ª. –î–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã –≤–æ–¥—ã –æ—Å—Ç–∞–ª–æ—Å—å: {str(mls_to_goal)}"

    await state.clear()
    if mls_to_goal > 0:
        await message.answer(result_message)
    elif mls_to_goal == 0:
        await message.answer(result_message + f"\n–ù–æ—Ä–º–∞ –≤–æ–¥—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")

@router.message(Command("log_food"))
async def log_food(message: Message, command: CommandObject, state: FSMContext):
    logged_food = command.args
    await state.set_state(UserProfile.logged_food)
    await state.update_data(logged_food=logged_food)

    calories_per_100g = await get_calories(logged_food, 100)

    await message.answer(f"{logged_food} - {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
    await state.set_state(UserProfile.logged_calories)

@router.message(UserProfile.logged_calories)
async def process_logged_calories(message: Message, state: FSMContext):
    logged_calories = int(message.text)
    await state.update_data(logged_calories=logged_calories)

    data = await state.get_data()
    logged_food = data.get('logged_food')
    calories = await get_calories(logged_food, logged_calories)
    log_calories(calories, message.from_user.id)

    await state.clear()
    await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {calories} –∫–∫–∞–ª.")

@router.message(Command("log_workout"))
async def log_workout(message: Message, command: CommandObject):
    workout_type, duration = command.args.split()
    duration = int(duration)

    calories_burned_dict = await get_calories_burned_and_update_data(workout_type, duration, message.from_user.id)

    result_message = f"{workout_type} {duration} –º–∏–Ω—É—Ç ‚Äî {calories_burned_dict['calories_burned']} –∫–∫–∞–ª."
    if calories_burned_dict["water_goal_addition"] > 0:
        result_message += f" –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {calories_burned_dict['water_goal_addition']} –º–ª –≤–æ–¥—ã."

    await message.answer(result_message)

@router.message(Command("check_progress"))
async def check_progress(message: Message):
    user_data = get_user_data(message.from_user.id)

    total_water = 0
    if "logged_water" in user_data:
        total_water = sum(value for key, value in user_data["logged_water"].items() if key.date() == date.today())

    total_calories = 0
    if "logged_calories" in user_data:
        total_calories = sum(value for key, value in user_data["logged_calories"].items() if key.date() == date.today())

    calories_burned = user_data["calories_burned"] if "calories_burned" in user_data else 0

    result_message = (
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n –í–æ–¥–∞:\n - –í—ã–ø–∏—Ç–æ: {total_water} –º–ª –∏–∑ {user_data['water_goal']} –º–ª.\n - –û—Å—Ç–∞–ª–æ—Å—å: "
            f"{user_data['water_goal'] - total_water} –º–ª.\n\n –ö–∞–ª–æ—Ä–∏–∏:\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {total_calories} –∫–∫–∞–ª –∏–∑ "
            f"{user_data['calories_goal']} –∫–∫–∞–ª.\n- –°–æ–∂–∂–µ–Ω–æ: {calories_burned} –∫–∫–∞–ª.\n"
            f"- –ë–∞–ª–∞–Ω—Å: {total_calories - calories_burned} –∫–∫–∞–ª."
    )
    await message.answer(result_message)

def setup_handlers(dp):
    dp.include_router(router)
